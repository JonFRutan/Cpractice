#include "stopwatch.h"

static clock_t start, stop;
static double cpu_time_elapsed;

void start_watch(clock_t *start) {
    *start = clock();
}

void stop_watch(clock_t *stop) {
    *stop = clock();
}

//
double get_cpu_time_elapsed(clock_t *start, clock_t *stop) {
    cpu_time_elapsed = ((double)(*stop - *start)) / CLOCKS_PER_SEC;
    return cpu_time_elapsed;
}

//useless function
void print_cpu_time(double cpu_time) {
    printf("%f seconds of CPU usage.", cpu_time);
}

//main is for testing the stopwatch, calling with an argument will count based on the provided number.
//To compile and use main: gcc -DTEST stopwatch.c -o stopwatch.exe
#ifdef TEST
int main(int argc, char *argv[]) {
    if (argc <= 1) {
        printf("Not enough arguments- provide a MAX int for testing.\n");
        return 1;
    }
    unsigned int count_max = atoi(argv[1]);
    if (!count_max) {
        printf("Provide an int > 0\n");
        return 1;
    }
    printf("Running stopwatch test...\n");
    start_watch(&start);
    unsigned int count = 0;
    for (int i=0;i<count_max;i++) {
        count++;
        printf("\r%d/%d", count, count_max);       //Prints current iteration out of our max
        fflush(stdout);                            //Flushes the programs output
    }
    printf("\n");
    stop_watch(&stop);
    print_cpu_time(get_cpu_time_elapsed());
    printf("\n");
    return 0;
}
#endif

